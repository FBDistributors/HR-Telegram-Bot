import asyncio
import logging
import io
import docx
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import os
from dotenv import load_dotenv

load_dotenv()

# --- SOZLAMALAR ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HR_GROUP_ID = os.getenv("HR_GROUP_ID")
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- TILLAR UCHUN LUG'AT (TO'LIQ VERSIYASI) ---
texts = {
    'uz': {
        'welcome': "Assalomu alaykum! Tilni tanlang.",
        'ask_name': "To'liq ism sharifingizni (FIO) kiriting:",
        'ask_vacancy': "Qaysi vakansiyaga murojaat qilyapsiz?",
        'ask_experience': "Ish tajribangiz haqida yozing (oxirgi ish joyingiz, lavozimingiz, necha yil ishlaganingiz).",
        'ask_salary': "Qancha oylik maosh kutyapsiz? (so'mda, raqam yoki matn bilan yozing)",
        'ask_location': "Yashash manzilingizni kiriting (shahar, tuman).",
        'ask_skills': "Vakansiyaga oid asosiy ko'nikmalaringizni yozing (masalan: Excel, 1C, Python, sotuv).",
        'ask_availability': "Yaqin kunlarda ish boshlashga tayyormisiz?",
        'button_yes': "‚úÖ Ha",
        'button_no': "‚ùå Yo'q",
        'ask_contact': "Siz bilan bog'lanish uchun telefon raqamingizni kiriting.",
        'goodbye_user': "Barcha ma'lumotlaringiz uchun rahmat! Arizangiz muvaffaqiyatli qabul qilindi. Nomzodingiz ma'qul topilsa, biz siz bilan tez orada bog'lanamiz. ‚úÖ",
        'analyzing': "Ma'lumotlar qabul qilindi. Hozir sun'iy intellekt yordamida tahlil qilinmoqda, bir oz kuting...",
        'hr_notification_convo': """üîî **Yangi nomzod (Suhbat orqali)!**

üë§ **FIO:** {name}
üë®‚Äçüíº **Vakansiya:** {vacancy}
-------------------
**Nomzod javoblari:**
- **Tajribasi:** {experience}
- **Maosh kutilmasi:** {salary}
- **Manzili:** {location}
- **Ko'nikmalari:** {skills}
- **Ishga tayyorligi:** {availability}
- **Aloqa:** {contact}
-------------------
{summary}""",
        'gemini_convo_prompt': """Sen tajribali HR-menejersan. Quyida nomzodning suhbat orqali bergan javoblari keltirilgan. 
        Ushbu ma'lumotlarni tahlil qilib, nomzod haqida o'zbek tilida, lotin alifbosida qisqacha va aniq xulosa yoz.
        Tahlil quyidagi formatda bo'lsin, emoji'lardan foydalan:
        ü§ñ **Umumiy xulosa:** [Nomzodning javoblari va vakansiyaga mosligi asosida 2-3 gaplik xulosa]
        ‚ú® **Kuchli tomonlari:**
        ‚úÖ [Suhbatdan topilgan birinchi kuchli jihat]
        ‚úÖ [Suhbatdan topilgan ikkinchi kuchli jihat]
        üìä **Dastlabki baho:** [Mos keladi / O'ylab ko'rish kerak / Tajribasi kam]"""
    },
    'ru': {
        'welcome': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.",
        'ask_name': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–§–ò–û):",
        'ask_vacancy': "–ù–∞ –∫–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ?",
        'ask_experience': "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–ª–∏).",
        'ask_salary': "–ö–∞–∫—É—é –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ? (–≤ —Å—É–º–∞—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)",
        'ask_location': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω).",
        'ask_skills': "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Excel, 1C, Python, –ø—Ä–æ–¥–∞–∂–∏).",
        'ask_availability': "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?",
        'button_yes': "‚úÖ –î–∞",
        'button_no': "‚ùå –ù–µ—Ç",
        'ask_contact': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.",
        'goodbye_user': "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞. ‚úÖ",
        'analyzing': "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –°–µ–π—á–∞—Å –æ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
        'hr_notification_convo': """üîî **–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç (—á–µ—Ä–µ–∑ —á–∞—Ç)!**

üë§ **–§–ò–û:** {name}
üë®‚Äçüíº **–í–∞–∫–∞–Ω—Å–∏—è:** {vacancy}
-------------------
**–û—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:**
- **–û–ø—ã—Ç:** {experience}
- **–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary}
- **–ê–¥—Ä–µ—Å:** {location}
- **–ù–∞–≤—ã–∫–∏:** {skills}
- **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ:** {availability}
- **–ö–æ–Ω—Ç–∞–∫—Ç:** {contact}
-------------------
{summary}""",
        'gemini_convo_prompt': """–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —á–∞—Ç–∞. 
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –∏ —á–µ—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏:
        ü§ñ **–û–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:** [–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏]
        ‚ú® **–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**
        ‚úÖ [–ü–µ—Ä–≤–∞—è –∫–ª—é—á–µ–≤–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö]
        ‚úÖ [–í—Ç–æ—Ä–∞—è –∫–ª—é—á–µ–≤–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö]
        üìä **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:** [–ü–æ–¥—Ö–æ–¥–∏—Ç / –°—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å / –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞]"""
    }
}

# --- BOTNING XOTIRASI (FSM) ---
class Form(StatesGroup):
    language_selection = State()
    name = State()
    vacancy = State()
    experience = State()
    salary = State()
    location = State()
    skills = State()
    availability = State()
    contact = State()

# --- ASOSIY BOT QISMI ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def get_user_lang(state: FSMContext):
    user_data = await state.get_data()
    return user_data.get('language', 'uz')

# --- BOT SUHBATLOGIKASI ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    language_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="lang_uz")], [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]])
    await message.reply(f"{texts['uz']['welcome']}\n{texts['ru']['welcome']}", reply_markup=language_keyboard)
    await state.set_state(Form.language_selection)

@dp.callback_query(Form.language_selection, F.data.startswith('lang_'))
async def process_language_selection(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split('_')[1]
    await state.update_data(language=lang)
    await callback.message.delete_reply_markup()
    await callback.message.answer(texts[lang]['ask_name'])
    await state.set_state(Form.name)
    await callback.answer()

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(name=message.text)
    await message.answer(texts[lang]['ask_vacancy'])
    await state.set_state(Form.vacancy)

@dp.message(Form.vacancy)
async def process_vacancy(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(vacancy=message.text)
    await message.answer(texts[lang]['ask_experience'])
    await state.set_state(Form.experience)

@dp.message(Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(experience=message.text)
    await message.answer(texts[lang]['ask_salary'])
    await state.set_state(Form.salary)

@dp.message(Form.salary)
async def process_salary(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(salary=message.text)
    await message.answer(texts[lang]['ask_location'])
    await state.set_state(Form.location)

@dp.message(Form.location)
async def process_location(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(location=message.text)
    await message.answer(texts[lang]['ask_skills'])
    await state.set_state(Form.skills)

@dp.message(Form.skills)
async def process_skills(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(skills=message.text)
    availability_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts[lang]['button_yes'], callback_data="availability_yes")],
        [InlineKeyboardButton(text=texts[lang]['button_no'], callback_data="availability_no")]
    ])
    await message.answer(texts[lang]['ask_availability'], reply_markup=availability_keyboard)
    await state.set_state(Form.availability)

@dp.callback_query(Form.availability, F.data.startswith('availability_'))
async def process_availability(callback: types.CallbackQuery, state: FSMContext):
    lang = await get_user_lang(state)
    choice = callback.data.split('_')[1]
    availability_text = texts[lang]['button_yes'] if choice == "yes" else texts[lang]['button_no']
    
    await state.update_data(availability=availability_text)
    await callback.message.delete_reply_markup()
    await callback.message.answer(texts[lang]['ask_contact'])
    await state.set_state(Form.contact)
    await callback.answer()

@dp.message(Form.contact)
async def process_contact(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(contact=message.text)
    await message.answer(texts[lang]['analyzing'])

    user_data = await state.get_data()
    
    candidate_summary_text = (
        f"Vakansiya: {user_data.get('vacancy')}\n"
        f"Tajribasi: {user_data.get('experience')}\n"
        f"Maosh kutilmasi: {user_data.get('salary')}\n"
        f"Manzili: {user_data.get('location')}\n"
        f"Ko'nikmalari: {user_data.get('skills')}\n"
        f"Ishga tayyorligi: {user_data.get('availability')}\n"
        f"Aloqa: {user_data.get('contact')}"
    )
    
    prompt = texts[lang]['gemini_convo_prompt']
    full_prompt = f"{prompt}\n\nNomzod javoblari:\n{candidate_summary_text}"
    
    response = await model.generate_content_async(full_prompt)
    gemini_summary = response.text
    
    hr_notification_template = texts[lang]['hr_notification_convo']
    hr_summary_text = hr_notification_template.format(
        name=user_data.get('name'),
        vacancy=user_data.get('vacancy'),
        experience=user_data.get('experience'),
        salary=user_data.get('salary'),
        location=user_data.get('location'),
        skills=user_data.get('skills'),
        availability=user_data.get('availability'),
        contact=user_data.get('contact'),
        summary=gemini_summary
    )

    if HR_GROUP_ID:
        await bot.send_message(HR_GROUP_ID, hr_summary_text, parse_mode="Markdown")

    await message.answer(texts[lang]['goodbye_user'])
    await state.clear()

async def main():
    if not BOT_TOKEN or not GEMINI_API_KEY:
        logging.critical("Bot tokeni yoki Gemini API kaliti topilmadi!")
        return
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())