import asyncio
import logging
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, GEMINI_API_KEY

# --- SOZLAMALAR ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- TILLAR UCHUN LUG'AT ---
texts = {
    'uz': {
        'welcome': "Assalomu alaykum! Tilni tanlang.",
        'ask_name': "To'liq ism-familiyangizni kiriting:",
        'ask_experience': "Rahmat! Endi tajribangiz haqida yozing (masalan, '2 yil SMM sohasida').",
        'ask_portfolio': "Ajoyib! Endi portfoliongizni yuboring (fayl yoki havolasini).",
        'analyzing': "Ma'lumotlar qabul qilindi. Hozir sun'iy intellekt yordamida tahlil qilinmoqda, bir oz kuting...",
        'summary_title': "**Sun'iy intellekt xulosasi:**\n\n",
        'goodbye': "\n\nRahmat! Tez orada siz bilan bog'lanamiz. ‚úÖ",
        'gemini_prompt': """Sen tajribali HR-menejersan. Quyidagi nomzodning ma'lumotlarini tahlil qilib, u haqida o'zbek tilida qisqacha va aniq xulosa yoz.
        Nomzod ma'lumotlari:
        - Ism: {name}
        - Tajribasi: {experience}
        Xulosa quyidagi formatda bo'lsin:
        Xulosa: [Nomzodning tajribasi va so'zlari asosida 2-3 gaplik xulosa]
        Dastlabki baho: [Mos keladi / O'ylab ko'rish kerak / Tajribasi kam]"""
    },
    'ru': {
        'welcome': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.",
        'ask_name': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        'ask_experience': "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 –≥–æ–¥–∞ –≤ —Å—Ñ–µ—Ä–µ SMM').",
        'ask_portfolio': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—Ñ–∞–π–ª–æ–º –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π).",
        'analyzing': "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –°–µ–π—á–∞—Å –æ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
        'summary_title': "**–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:**\n\n",
        'goodbye': "\n\n–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. ‚úÖ",
        'gemini_prompt': """–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –∏ —á–µ—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ –Ω—ë–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        - –ò–º—è: {name}
        - –û–ø—ã—Ç: {experience}
        –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: [–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –∏ —Å–ª–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞]
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: [–ü–æ–¥—Ö–æ–¥–∏—Ç / –°—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å / –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞]"""
    }
}

# --- BOTNING XOTIRASI (FSM) ---
class Form(StatesGroup):
    language_selection = State()
    name = State()
    experience = State()
    portfolio = State()

# --- ASOSIY BOT QISMI ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Til tanlash uchun tugmalar
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üá∫üáø O'zbekcha", callback_data="lang_uz")],
    [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
])

# --- BOT SUHBATLOGIKASI ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await message.reply(f"{texts['uz']['welcome']}\n{texts['ru']['welcome']}", reply_markup=language_keyboard)
    await state.set_state(Form.language_selection)

# Til tanlash tugmasi bosilganda ishlaydigan handler
@dp.callback_query(Form.language_selection, F.data.startswith('lang_'))
async def process_language_selection(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split('_')[1]  # 'uz' yoki 'ru'
    await state.update_data(language=lang)
    
    await callback.message.edit_reply_markup() # Tugmalarni o'chirish
    await callback.message.answer(texts[lang]['ask_name'])
    await state.set_state(Form.name)
    await callback.answer()

async def get_user_lang(state: FSMContext):
    user_data = await state.get_data()
    return user_data.get('language', 'uz') # Agar til topilmasa, standart 'uz'

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(name=message.text)
    await message.answer(texts[lang]['ask_experience'])
    await state.set_state(Form.experience)

@dp.message(Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await state.update_data(experience=message.text)
    await message.answer(texts[lang]['ask_portfolio'])
    await state.set_state(Form.portfolio)

@dp.message(Form.portfolio)
async def process_portfolio(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await message.answer(texts[lang]['analyzing'])
    
    user_data = await state.get_data()
    
    # Gemini'ga yuboriladigan promptni tanlangan tilga moslash
    prompt = texts[lang]['gemini_prompt'].format(
        name=user_data.get('name'),
        experience=user_data.get('experience')
    )
    
    try:
        response = await model.generate_content_async(prompt)
        gemini_summary = response.text
    except Exception as e:
        logging.error(f"Gemini API xatosi: {e}")
        gemini_summary = "Sun'iy intellekt bilan tahlil qilishda xatolik yuz berdi."
    
    logging.info(f"--- GEMINI XULOSASI ({lang.upper()}) ---\n{gemini_summary}\n-----------------------")
    await message.answer(f"{texts[lang]['summary_title']}{gemini_summary}{texts[lang]['goodbye']}")
    
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())